name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    name: Lint and Format Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --group dev

    - name: Check trailing whitespace
      run: |
        # Check for trailing whitespace (excluding report files)
        if git ls-files | grep -v '.*-report\.json$' | xargs grep -l '[[:space:]]$'; then
          echo "Files with trailing whitespace found"
          exit 1
        fi

    - name: Check end of file
      run: |
        # Check for files that don't end with newline (excluding report files)
        for file in $(git ls-files | grep -v '.*-report\.json$'); do
          if [ -f "$file" ] && [ "$(tail -c1 "$file" | wc -l)" -eq 0 ]; then
            echo "File $file doesn't end with newline"
            exit 1
          fi
        done

    - name: Check YAML syntax
      run: |
        # Check YAML files (excluding invalid test fixtures)
        find . -name "*.yaml" -o -name "*.yml" | grep -v "tests/fixtures/invalid_schemas" | xargs -I {} python -c "import yaml; yaml.safe_load(open('{}'))"

    - name: Check JSON syntax
      run: |
        # Check JSON files (excluding invalid test fixtures)
        find . -name "*.json" | grep -v "tests/fixtures/invalid_schemas" | xargs -I {} python -c "import json; json.load(open('{}'))"

    - name: Check TOML syntax
      run: |
        # Check TOML files
        find . -name "*.toml" | xargs -I {} python -c "import tomllib; tomllib.load(open('{}', 'rb'))"

    - name: Check for merge conflicts
      run: |
        # Check for merge conflict markers
        if git grep -E '^(<{7}|={7}|>{7})' -- ':!*.md'; then
          echo "Merge conflict markers found"
          exit 1
        fi


    - name: Black format check
      run: uv run black --check --diff .

    - name: isort import order check
      run: uv run isort --check-only --diff --profile black .

    - name: Ruff linting
      run: uv run ruff check --output-format=github .

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run MyPy type checking
      run: uv run mypy --config-file=pyproject.toml py_schemax/

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run tests with coverage
      run: |
        uv run pytest tests/ \
          --cov=py_schemax \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=80 \
          --tb=short

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run Bandit security checks
      run: |
        uv run bandit -r py_schemax -f json -o bandit-report.json
        uv run bandit -r py_schemax

    - name: Run Safety CLI to check for vulnerabilities
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-test:
    name: Build and Installation Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --group dev

    - name: Build package
      run: uv build

    - name: Test installation
      run: |
        # Find and install the built wheel
        WHEEL_FILE=$(find dist -name "*.whl" | head -1)
        if [ -n "$WHEEL_FILE" ]; then
          uv pip install "$WHEEL_FILE"
        else
          echo "No wheel file found in dist/"
          exit 1
        fi

    - name: Test CLI functionality
      run: uv run schemax --help

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  # Combined status check for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, test, security, build-test]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.lint-and-format.result }}" != "success" || \
              "${{ needs.type-check.result }}" != "success" || \
              "${{ needs.test.result }}" != "success" || \
              "${{ needs.security.result }}" != "success" || \
              "${{ needs.build-test.result }}" != "success" ]]; then
          echo "One or more CI jobs failed"
          exit 1
        fi
        echo "All CI jobs passed successfully"
